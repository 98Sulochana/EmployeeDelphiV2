unit EmployeeU;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Data.DB, Vcl.Mask,
  Vcl.ExtCtrls, Vcl.DBCtrls, Vcl.Grids, Vcl.DBGrids, DateUtils, Vcl.Menus;

type
  TEmployeeF = class(TForm)
    Label1: TLabel;
    ided: TDBEdit;
    DataSource1: TDataSource;
    Label2: TLabel;
    nameed: TDBEdit;
    Label3: TLabel;
    empided: TDBEdit;
    Label4: TLabel;
    niced: TDBEdit;
    Label5: TLabel;
    dobed: TDBEdit;
    Label6: TLabel;
    addressed: TDBEdit;
    bottompnl: TPanel;
    savebtn: TButton;
    closebtn: TButton;
    ContactGrid: TDBGrid;
    contacted: TLabel;
    Label7: TLabel;
    ageed: TEdit;
    ContactPopupMenu: TPopupMenu;
    AddContactMenuItem: TMenuItem;
    UpdateContactMenuItem: TMenuItem;
    DeleteContactMenuItem: TMenuItem;
    procedure btn1Click(Sender: TObject);
    procedure btn2Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure dobedChange(Sender: TObject);
    procedure ContactGridKeyPress(Sender: TObject; var Key: Char);
    procedure AddContactMenuItemClick(Sender: TObject);
    procedure UpdateContactMenuItemClick(Sender: TObject);
    procedure DeleteContactMenuItemClick(Sender: TObject);
    procedure ContactGridMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
  private

    function ValidateFields: Boolean;
    procedure CalculateAge;
    procedure SaveContacts(empId: Integer);
  public
    procedure ResetFormFields;
  end;

var
  EmployeeF: TEmployeeF;

implementation

{$R *.dfm}

uses DataU;

procedure TEmployeeF.ResetFormFields;
begin
  ided.Clear;
  nameed.Clear;
  empided.Clear;
  niced.Clear;
  dobed.Clear;
  addressed.Clear;
  ageed.Clear;

  DataM.qrContact.Close;
  DataM.qrContact.Open;
  DataM.qrContact.EmptyDataSet;  // Clear the contact dataset
end;

// Validate form fields
function TEmployeeF.ValidateFields: Boolean;
var
  s: string;
begin
  s := '';
  if Trim(nameed.Text) = '' then s := s + 'Name cannot be empty' + sLineBreak;
  if Trim(empided.Text) = '' then s := s + 'EmpID cannot be empty' + sLineBreak;
  if Trim(niced.Text) = '' then s := s + 'NIC cannot be empty' + sLineBreak;
  if Trim(dobed.Text) = '' then s := s + 'DOB cannot be empty' + sLineBreak
  else if StrToDate(dobed.Text) > Now() then s := s + 'DOB is Invalid' + sLineBreak;
  if Trim(addressed.Text) = '' then s := s + 'Address cannot be empty' + sLineBreak;
  Result := (s = '');
  if not Result then ShowMessage(s);
end;

// Calculate age based on DOB
procedure TEmployeeF.CalculateAge;
var
  DOB: TDate;
  Age: Integer;
  FormatSettings: TFormatSettings;
begin
  FormatSettings := TFormatSettings.Create;
  FormatSettings.ShortDateFormat := 'yyyy-mm-dd';
  FormatSettings.DateSeparator := '-';
  try
    DOB := StrToDate(dobed.Text, FormatSettings);
    Age := YearsBetween(Now, DOB);
    ageed.Text := IntToStr(Age);

    // Ensure the dataset is in edit mode
    if not (DataM.qr1.State in [dsEdit, dsInsert]) then
      DataM.qr1.Edit;

    DataM.qr1.FieldByName('age').AsInteger := Age;  // Set the age field in the dataset
  except
    ageed.Text := '';
    if DataM.qr1.State in [dsEdit, dsInsert] then
      DataM.qr1.FieldByName('age').Clear;  // Clear the age field if there is an error
  end;
end;

// Save contact details associated with the employee
procedure TEmployeeF.SaveContacts(empId: Integer);
begin
  DataM.qrContact.First;    // Moves to first record in the contact query
  while not DataM.qrContact.Eof do
  begin
    if DataM.qrContact.FieldByName('empId').AsInteger <> empId then
    begin
      DataM.qrContact.Edit;
      DataM.qrContact.FieldByName('empId').AsInteger := empId;
      DataM.qrContact.Post;
    end;
    DataM.qrContact.Next;   // Moves to the next record in the contact query
  end;
end;

// Save button function of form
procedure TEmployeeF.btn1Click(Sender: TObject);
var
  empId: Integer;
begin
  if ValidateFields then
  begin
    // Start transaction
    DataM.StartTransaction;
    try
      if DataM.qr1.State in [dsInsert, dsEdit] then
      begin
        CalculateAge;  // Ensure age is calculated and set before posting
        DataM.qr1.Post;
      end;
      empId := DataM.qr1.FieldByName('id').AsInteger;
      if DataM.qrContact.State in [dsInsert, dsEdit] then DataM.qrContact.Post;
      SaveContacts(empId);

      // Commit transaction
      DataM.CommitTransaction;

      ShowMessage('Employee details saved successfully!');
      Close;
    except
      on E: Exception do
      begin
        // Rollback transaction in case of error
        DataM.RollbackTransaction;
        ShowMessage('Error saving employee details: ' + E.Message);
      end;
    end;
  end;
end;

// Close button function of form
procedure TEmployeeF.btn2Click(Sender: TObject);
begin
  if DataM.qr1.State in [dsEdit, dsInsert] then DataM.qr1.Cancel;
  Close;
end;

// Load contact details when form is shown
procedure TEmployeeF.FormShow(Sender: TObject);
begin
  ResetFormFields;  // Reset form fields when the form is shown
end;

// On change event for DOB
procedure TEmployeeF.dobedChange(Sender: TObject);
begin
  CalculateAge;
end;

// Handle key press event to add new contact on pressing Enter
procedure TEmployeeF.ContactGridKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then  // Enter key
  begin
    if DataM.qrContact.State in [dsInsert, dsEdit] then
    begin
      DataM.qrContact.FieldByName('empId').AsInteger := DataM.qr1.FieldByName('id').AsInteger;
      DataM.qrContact.Post;
    end;
    DataM.qrContact.Append;
    DataM.qrContact.FieldByName('empId').AsInteger := DataM.qr1.FieldByName('id').AsInteger;
    Key := #0;  // Suppress default beep sound
  end;
end;

// Handle the add contact menu item click
procedure TEmployeeF.AddContactMenuItemClick(Sender: TObject);
begin
  if DataM.qrContact.State in [dsInsert, dsEdit] then
  begin
    DataM.qrContact.FieldByName('empId').AsInteger := DataM.qr1.FieldByName('id').AsInteger;
    DataM.qrContact.Post;
  end;
  DataM.qrContact.Append;  // Prepares the contact query to append a new record
  DataM.qrContact.FieldByName('empId').AsInteger := DataM.qr1.FieldByName('id').AsInteger;
end;

// Handle the update contact menu item click
procedure TEmployeeF.UpdateContactMenuItemClick(Sender: TObject);
begin
  if not DataM.qrContact.IsEmpty then DataM.qrContact.Edit;
end;

// Handle the delete contact menu item click
procedure TEmployeeF.DeleteContactMenuItemClick(Sender: TObject);
begin
  if not DataM.qrContact.IsEmpty then DataM.qrContact.Delete;
end;

// Show context menu on right-click in the contact grid
procedure TEmployeeF.ContactGridMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  if Button = mbRight then ContactPopupMenu.Popup(Mouse.CursorPos.X, Mouse.CursorPos.Y);
end;

end.

